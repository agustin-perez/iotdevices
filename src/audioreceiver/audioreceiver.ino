es#include <Arduino.h>
#include <IRsend.h>
#include <ESP32wifi.h>
#include <ESP8266mDNS.h>
#include <PubSubClient.h>
#include <ESP8266WebServer.h>
#include <AutoConnect.h>

//DEFINITIONS
#define powerSensor A0      //A0
#define irLed 5             //D1
#define onBoardLED 2        //D4
#define optoSpeakersA 4     //D2
#define optoSpeakersB 0     //D3
#define optoPhono 15        //D8
#define speakersAPayload 1
#define speakersBPayload 2
#define phonoPayload 3
#define STAMqttServerAddress ""
#define STAMqttUserName ""
#define STAMqttPwd ""
#define STAMqttClientID "Technics SA-GX170"

const char* mqttServerAddress = STAMqttServerAddress;
const char* mqttUserName = STAMqttUserName;
const char* mqttPwd = STAMqttPwd;
const char* mqttClientID = STAMqttClientID;
static const char HELLO_PAGE[] PROGMEM = R"(
{ "title": "Audio receiver", "uri": "/", "menu": true, "element": [
    { "name": "caption", "type": "ACText", "value": "<h2>Technics SA-GX170</h2>",  "style": "text-align:center;color:#2f4f4f;padding:10px;" },
    { "name": "content", "type": "ACText", "value": "ESP8266 management page" } ]
}
)";      

//REMOTE CONTROL RAW DATA (PRONTO RAW PROTOCOL)

//POWER
uint16_t powerC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x003f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x0aa8 };

//TV
uint16_t tvC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0aa9 };

//VOL+
uint16_t volPlusC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0aa9 };

//VOL-
uint16_t volMinusC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x003f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x0aa8 };

//VCR1
uint16_t vcr1C[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0aa9 };

//TAPE MONITOR
uint16_t tMonC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0aba };

//CD
uint16_t cdC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0aba };

//TUNER
uint16_t tunerC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0aba };

//MUTE
uint16_t muteC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0aba };

//INITIALIZATIONS
WiFiClient espClient;
IRsend irsend(irLed);
PubSubClient client(espClient);
ESP8266WebServer server;                              
AutoConnect portal(server);   
AutoConnectConfig config;           
AutoConnectAux hello;
String strTopic;
String strPayload;
bool powerState=false;
unsigned long previousMillis = 0;   
const long interval = 500;

//HARDWARE BUTTONS (OPTOCOUPLERS)
void hwButtons(int code) {
  switch (code) {
    case speakersAPayload:
      digitalWrite(optoSpeakersA, HIGH);
      delay(50);
      digitalWrite(optoSpeakersA, LOW);
      break;
    case speakersBPayload:
      digitalWrite(optoSpeakersB, HIGH);
      delay(50);
      digitalWrite(optoSpeakersB, LOW);
      break;
    case phonoPayload:
      digitalWrite(optoPhono, HIGH);
      delay(50);
      digitalWrite(optoPhono, LOW);
      break;
  }
}

//IR COMMANDS
void irCommands(int cmnd) {
  switch (cmnd) {
    case 1:
      irsend.sendPronto(powerC, 104);
      break;
    case 2:
      irsend.sendPronto(tvC, 104);
      break;
    case 3:
      irsend.sendPronto(vcr1C, 104);
      irsend.sendPronto(tMonC, 104);
      break;
    case 4:
      irsend.sendPronto(tMonC, 104);
      break;
    case 5:
      irsend.sendPronto(cdC, 104);
      irsend.sendPronto(tMonC, 104);
      break;
    case 6:
      irsend.sendPronto(tunerC, 104);
      irsend.sendPronto(tMonC, 104);
      break;
    case 7:
      irsend.sendPronto(muteC, 104);
      break;
  }
}

//IR VOLUME COMMANDS
//VOLUME DOWN TO 0 = 100
void irVolumeCommands(int cmnd, int steps) {
  switch (cmnd) {
    case '1':
      for (int i = 0; i < steps; i++) {
        irsend.sendPronto(volPlusC, 104);
      }
      break;
    case '2':
      for (int i = 0; i < steps; i++) {
        irsend.sendPronto(volMinusC, 104);
      }
      break;
  }
}

//MQTT CALLBACK FUNCTION
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  payload[length] = '\0';
  strTopic = String((char*)topic);
  int payloadInt = (int)payload;
  if (strTopic == "cmnd/technics/hwbuttons") {
    hwButtons(atoi((char*)payload));
  }

  //IR Commands
  if (strTopic == "cmnd/technics/ir") {
    irCommands(atoi((char*)payload));
  }

  //IR VOLUME COMMANDS
  if (strTopic == "cmnd/technics/ir/vol") {
    char* payloadChar = (char*)payload;
    char *payloadWFE = &payloadChar[2];
    irVolumeCommands((int)payload[0], atoi(payloadWFE));
  }
  digitalWrite(irLed, LOW);
}

//MQTT RECONNECT
void mqttReconnect() {
  while (!client.connected()) {
    if (client.connect(mqttClientID, mqttUserName, mqttPwd)) {
      client.subscribe("avail/technics");
      client.subscribe("cmnd/technics/hwbuttons");
      client.subscribe("cmnd/technics/ir");
      client.subscribe("cmnd/technics/ir/vol");
      client.subscribe("stat/technics/power");
      client.publish("avail/technics", "Online");
    } else {
      delay(5000);
    }
  }
}

void setup() {
  pinMode(onBoardLED, OUTPUT);
  pinMode(optoSpeakersA, OUTPUT);
  pinMode(optoSpeakersB, OUTPUT);
  pinMode(powerSensor, INPUT);
  pinMode(optoPhono, OUTPUT);
  digitalWrite(onBoardLED, LOW);
  digitalWrite(optoSpeakersA, LOW);
  digitalWrite(optoSpeakersB, LOW);
  digitalWrite(optoPhono, LOW);
  client.setServer(mqttServerAddress, 1883);
  client.setCallback(mqttCallback);
  digitalWrite(onBoardLED, LOW);
  irsend.begin();
  config.ota = AC_OTA_BUILTIN;      
  portal.config(config);           
  hello.load(HELLO_PAGE);         
  portal.join({ hello });           
  portal.begin();    
}

void loop() {
  if (!client.connected()) {
    mqttReconnect();
  }
  client.loop();
  portal.handleClient(); 
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    client.publish("avail/technics", "Online");
    int powerLdr = analogRead(powerSensor);
    if (powerLdr > 200){
      powerState=true;     
    } else {
      powerState=false;
    }
    if (powerState){
      client.publish("stat/technics/power", "on");  
    } else {
      client.publish("stat/technics/power", "off");  
    }
  }
}#include <Arduino.h>
#include <IRsend.h>
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <PubSubClient.h>
#include <ESP8266WebServer.h>
#include <AutoConnect.h>

//DEFINITIONS
#define powerSensor A0      //A0
#define irLed 5             //D1
#define onBoardLED 2        //D4
#define optoSpeakersA 4     //D2
#define optoSpeakersB 0     //D3
#define optoPhono 15        //D8
#define speakersAPayload 1
#define speakersBPayload 2
#define phonoPayload 3
#define STAMqttServerAddress ""
#define STAMqttUserName ""
#define STAMqttPwd ""
#define STAMqttClientID "Technics SA-GX170"

const char* mqttServerAddress = STAMqttServerAddress;
const char* mqttUserName = STAMqttUserName;
const char* mqttPwd = STAMqttPwd;
const char* mqttClientID = STAMqttClientID;
static const char HELLO_PAGE[] PROGMEM = R"(
{ "title": "Audio receiver", "uri": "/", "menu": true, "element": [
    { "name": "caption", "type": "ACText", "value": "<h2>Technics SA-GX170</h2>",  "style": "text-align:center;color:#2f4f4f;padding:10px;" },
    { "name": "content", "type": "ACText", "value": "ESP8266 management page" } ]
}
)";      

//REMOTE CONTROL RAW DATA (PRONTO RAW PROTOCOL)

//POWER
uint16_t powerC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x003f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x0aa8 };

//TV
uint16_t tvC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0aa9 };

//VOL+
uint16_t volPlusC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0aa9 };

//VOL-
uint16_t volMinusC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x003f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x000f, 0x0011, 0x002f, 0x0011, 0x0aa8 };

//VCR1
uint16_t vcr1C[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0aa9 };

//TAPE MONITOR
uint16_t tMonC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0aba };

//CD
uint16_t cdC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0aba };

//TUNER
uint16_t tunerC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0aba };

//MUTE
uint16_t muteC[104] = { 0x0000, 0x0070, 0x0000, 0x0032, 0x0080, 0x0040, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0010, 0x0aba };

//INITIALIZATIONS
WiFiClient espClient;
IRsend irsend(irLed);
PubSubClient client(espClient);
ESP8266WebServer server;                              
AutoConnect portal(server);   
AutoConnectConfig config;           
AutoConnectAux hello;
String strTopic;
String strPayload;
bool powerState=false;
unsigned long previousMillis = 0;   
const long interval = 500;

//HARDWARE BUTTONS (OPTOCOUPLERS)
void hwButtons(int code) {
  switch (code) {
    case speakersAPayload:
      digitalWrite(optoSpeakersA, HIGH);
      delay(50);
      digitalWrite(optoSpeakersA, LOW);
      break;
    case speakersBPayload:
      digitalWrite(optoSpeakersB, HIGH);
      delay(50);
      digitalWrite(optoSpeakersB, LOW);
      break;
    case phonoPayload:
      digitalWrite(optoPhono, HIGH);
      delay(50);
      digitalWrite(optoPhono, LOW);
      break;
  }
}

//IR COMMANDS
void irCommands(int cmnd) {
  switch (cmnd) {
    case 1:
      irsend.sendPronto(powerC, 104);
      break;
    case 2:
      irsend.sendPronto(tvC, 104);
      break;
    case 3:
      irsend.sendPronto(vcr1C, 104);
      irsend.sendPronto(tMonC, 104);
      break;
    case 4:
      irsend.sendPronto(tMonC, 104);
      break;
    case 5:
      irsend.sendPronto(cdC, 104);
      irsend.sendPronto(tMonC, 104);
      break;
    case 6:
      irsend.sendPronto(tunerC, 104);
      irsend.sendPronto(tMonC, 104);
      break;
    case 7:
      irsend.sendPronto(muteC, 104);
      break;
  }
}

//IR VOLUME COMMANDS
//VOLUME DOWN TO 0 = 100
void irVolumeCommands(int cmnd, int steps) {
  switch (cmnd) {
    case '1':
      for (int i = 0; i < steps; i++) {
        irsend.sendPronto(volPlusC, 104);
      }
      break;
    case '2':
      for (int i = 0; i < steps; i++) {
        irsend.sendPronto(volMinusC, 104);
      }
      break;
  }
}

//MQTT CALLBACK FUNCTION
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  payload[length] = '\0';
  strTopic = String((char*)topic);
  int payloadInt = (int)payload;
  if (strTopic == "cmnd/technics/hwbuttons") {
    hwButtons(atoi((char*)payload));
  }

  //IR Commands
  if (strTopic == "cmnd/technics/ir") {
    irCommands(atoi((char*)payload));
  }

  //IR VOLUME COMMANDS
  if (strTopic == "cmnd/technics/ir/vol") {
    char* payloadChar = (char*)payload;
    char *payloadWFE = &payloadChar[2];
    irVolumeCommands((int)payload[0], atoi(payloadWFE));
  }
  digitalWrite(irLed, LOW);
}

//MQTT RECONNECT
void mqttReconnect() {
  while (!client.connected()) {
    if (client.connect(mqttClientID, mqttUserName, mqttPwd)) {
      client.subscribe("avail/technics");
      client.subscribe("cmnd/technics/hwbuttons");
      client.subscribe("cmnd/technics/ir");
      client.subscribe("cmnd/technics/ir/vol");
      client.subscribe("stat/technics/power");
      client.publish("avail/technics", "Online");
    } else {
      delay(5000);
    }
  }
}

void setup() {
  pinMode(onBoardLED, OUTPUT);
  pinMode(optoSpeakersA, OUTPUT);
  pinMode(optoSpeakersB, OUTPUT);
  pinMode(powerSensor, INPUT);
  pinMode(optoPhono, OUTPUT);
  digitalWrite(onBoardLED, LOW);
  digitalWrite(optoSpeakersA, LOW);
  digitalWrite(optoSpeakersB, LOW);
  digitalWrite(optoPhono, LOW);
  client.setServer(mqttServerAddress, 1883);
  client.setCallback(mqttCallback);
  digitalWrite(onBoardLED, LOW);
  irsend.begin();
  config.ota = AC_OTA_BUILTIN;      
  portal.config(config);           
  hello.load(HELLO_PAGE);         
  portal.join({ hello });           
  portal.begin();    
}

void loop() {
  if (!client.connected()) {
    mqttReconnect();
  }
  client.loop();
  portal.handleClient(); 
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    client.publish("avail/technics", "Online");
    int powerLdr = analogRead(powerSensor);
    if (powerLdr > 200){
      powerState=true;     
    } else {
      powerState=false;
    }
    if (powerState){
      client.publish("stat/technics/power", "on");  
    } else {
      client.publish("stat/technics/power", "off");  
    }
  }
}
